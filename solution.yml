---
# Hashira Placements Assignment - Online
name: Polynomial Interpolation for Secret Sharing
author: Your Full Name
email: your.email@example.com
secret: "YOUR_SECRET_NUMBER_HERE"  # ‚Üê REPLACE THIS WITH YOUR ACTUAL SECRET
github: https://github.com/yourusername/your-repo-name  # ‚Üê Optional: your GitHub link
files:
  - name: PolynomialInterpolation.java
    content: |
      import com.fasterxml.jackson.core.type.TypeReference;
      import com.fasterxml.jackson.databind.ObjectMapper;

      import java.io.File;
      import java.math.BigInteger;
      import java.util.*;

      public class PolynomialInterpolation {

          public static void main(String[] args) throws Exception {
              ObjectMapper mapper = new ObjectMapper();
              File jsonFile = new File("input.json");
              Map<String, Object> input = mapper.readValue(jsonFile, new TypeReference<Map<String, Object>>() {});

              Map<String, Object> keys = (Map<String, Object>) input.get("keys");
              int k = ((Number) keys.get("k")).intValue();

              List<Point> points = new ArrayList<>();
              for (Map.Entry<String, Object> entry : input.entrySet()) {
                  if (!entry.getKey().equals("keys")) {
                      Map<String, String> data = (Map<String, String>) entry.getValue();
                      int x = Integer.parseInt(entry.getKey());
                      int base = Integer.parseInt(data.get("base"));
                      String valueStr = data.get("value");
                      BigInteger y = new BigInteger(valueStr, base);
                      points.add(new Point(x, y));
                  }
              }

              points.sort(Comparator.comparingInt(p -> p.x));
              List<Point> selectedPoints = points.subList(0, k);

              BigInteger secret = lagrangeInterpolate(selectedPoints, 0);
              System.out.println("Secret: " + secret.toString());
          }

          private static BigInteger lagrangeInterpolate(List<Point> points, int targetX) {
              BigInteger result = BigInteger.ZERO;
              int n = points.size();

              for (int i = 0; i < n; i++) {
                  BigInteger xi = BigInteger.valueOf(points.get(i).x);
                  BigInteger yi = points.get(i).y;

                  BigInteger numerator = BigInteger.ONE;
                  BigInteger denominator = BigInteger.ONE;

                  for (int j = 0; j < n; j++) {
                      if (i == j) continue;

                      BigInteger xj = BigInteger.valueOf(points.get(j).x);
                      numerator = numerator.multiply(BigInteger.valueOf(targetX).subtract(xj));
                      denominator = denominator.multiply(xi.subtract(xj));
                  }

                  if (!numerator.mod(denominator).equals(BigInteger.ZERO)) {
                      throw new ArithmeticException("Non-integer coefficient in Lagrange interpolation.");
                  }

                  BigInteger term = yi.multiply(numerator.divide(denominator));
                  result = result.add(term);
              }

              return result;
          }

          static class Point {
              int x;
              BigInteger y;

              Point(int x, BigInteger y) {
                  this.x = x;
                  this.y = y;
              }
          }
      }

  - name: input.json
    content: |
      {
        "keys": {
          "n": 9,
          "k": 6
        },
        "1": {
          "base": "10",
          "value": "28735619723837"
        },
        "2": {
          "base": "16",
          "value": "1A228867F0CA"
        },
        "3": {
          "base": "12",
          "value": "32811A4AA0B7B"
        },
        "4": {
          "base": "11",
          "value": "917978721331A"
        },
        "5": {
          "base": "16",
          "value": "8849B69169B7B"
        },
        "6": {
          "base": "10",
          "value": "80743900841529"
        },
        "7": {
          "base": "3",
          "value": "1100001020022200002220210211212010"
        },
        "8": {
          "base": "7",
          "value": "13142354224366554335412345610"
        },
        "9": {
          "base": "5",
          "value": "10420213023401223410044240301"
        }
      }

  - name: pom.xml
    content: |
      <?xml version="1.0" encoding="UTF-8"?>
      <project xmlns="http://maven.apache.org/POM/4.0.0"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
               http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>

          <groupId>com.secretsharing</groupId>
          <artifactId>polynomial-interpolation</artifactId>
          <version>1.0-SNAPSHOT</version>

          <properties>
              <maven.compiler.source>11</maven.compiler.source>
              <maven.compiler.target>11</maven.compiler.target>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
          </properties>

          <dependencies>
              <dependency>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-databind</artifactId>
                  <version>2.15.2</version>
              </dependency>
          </dependencies>

          <build>
              <plugins>
                  <plugin>
                      <groupId>org.codehaus.mojo</groupId>
                      <artifactId>exec-maven-plugin</artifactId>
                      <version>3.1.0</version>
                      <configuration>
                          <mainClass>PolynomialInterpolation</mainClass>
                      </configuration>
                  </plugin>
              </plugins>
          </build>
      </project>

  - name: README.md
    content: |
      # üîê Secret Reconstruction via Polynomial Interpolation (Shamir's Secret Sharing)

      > ‚úÖ **Final Output (Secret)**: YOUR_SECRET_NUMBER_HERE

      A Java implementation to reconstruct a secret integer using **Lagrange interpolation** over integer points provided in mixed bases ‚Äî based on **Shamir‚Äôs Secret Sharing Scheme**.

      ---

      ## üöÄ How to Run

      ```bash
      mvn compile
      mvn exec:java
      ```

      Output: `Secret: YOUR_SECRET_NUMBER_HERE`

      ---

      Submitted by: Your Name
